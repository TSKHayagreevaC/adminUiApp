{"version":3,"sources":["components/entriesListItem/index.js","components/home/index.js","App.js","reportWebVitals.js","index.js"],"names":["EntriesListItem","state","editEntryDetails","id","updatedName","updatedEmail","updatedRole","onClickEditEntryButton","eachEntry","props","window","confirm","name","setState","onSubmitEditEntryForm","event","preventDefault","onUpdateEntryDetails","updatedEntryDetails","email","role","onChangeEntryName","target","value","onChangeEntryEmail","onChangeEntryRole","onClickDeleteButton","deleteEntry","onChangeCheckBox","selectEntry","unselectEntry","checked","renderEntryItemEditForm","selectedEntries","isEntrySelected","undefined","find","eachItem","entryBackgroundColor","className","onSubmit","type","onChange","required","autoFocus","placeholder","size","color","onClick","renderEntryListItem","this","Component","apiConstants","Home","apiStatus","entriesData","searchedDisplayEntries","searchInput","itemsRange","startItemNumber","endItemNumber","currentPageNumber","headInputCheckedStatus","getEntriesDataFromApi","a","options","method","fetch","dataResponse","ok","json","formattedData","displayPreviousPage","prevState","displayNextPage","entriesDataLength","length","totalPagesNumber","Math","ceil","totalPagesNumberToBeDisplayed","onChangeSearchInput","searchedEntriesData","map","toLowerCase","includes","push","filteredEntriesData","filter","filteredSearchedDisplayEntries","selectedEntry","updatedSelectedEntries","deleteSelectedItems","alert","EntriesTextItem","pseudoEntriesData","index","indexOf","splice","pseudoSearchDisplayEntries","onCheckHeadInput","isHeadInputChecked","thisPageList","slice","pseudoSelectedEntriesList","updatedPseudoSelectedEntriesList","existingEntry","updatedEntry","trialEntriesData","entryIndex","trialSearchedDisplayEntriesData","searchedIndex","renderLoader","height","width","renderPaginationContainer","renderEntriesList","entriesToBeDisplayed","isSearchInputValid","renderFailureView","renderEntriesListContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc07600d.chunk.js","sourcesContent":["import { Component, React } from \"react\";\n\nimport { MdDeleteOutline } from \"react-icons/md\";\nimport { AiOutlineForm } from \"react-icons/ai\";\nimport { FiUpload } from \"react-icons/fi\";\n\nimport \"./index.css\";\n\nclass EntriesListItem extends Component {\n  state = {\n    editEntryDetails: false,\n    id: \"\",\n    updatedName: \"\",\n    updatedEmail: \"\",\n    updatedRole: \"\",\n  };\n\n  // Function To Display Edit Entry Form, On Click Edit Entry Button...\n  onClickEditEntryButton = () => {\n    const { eachEntry } = this.props;\n    const result = window.confirm(\n      `Do You Want To Start Editing The Entry With The Name '${eachEntry.name}'...`\n    );\n    if (result) {\n      this.setState({ editEntryDetails: true });\n    }\n  };\n\n  // Edit The Entry By User - Storing Input Values Into State\n  onSubmitEditEntryForm = (event) => {\n    event.preventDefault();\n    const { onUpdateEntryDetails, eachEntry } = this.props;\n    const { updatedName, updatedEmail, updatedRole } = this.state;\n    const updatedEntryDetails = {\n      id: eachEntry.id,\n      name: updatedName,\n      email: updatedEmail,\n      role: updatedRole,\n    };\n    const result = window.confirm(\n      `Do You Want To Save The Changes To The Entry With Name: ${eachEntry.name}`\n    );\n    if (result) {\n      onUpdateEntryDetails(eachEntry, updatedEntryDetails);\n    }\n    this.setState({ editEntryDetails: false });\n  };\n\n  // Storing User Entered Name Into State\n  onChangeEntryName = (event) => {\n    this.setState({ updatedName: event.target.value });\n  };\n\n  // Storing User Entered Email Into State\n  onChangeEntryEmail = (event) => {\n    this.setState({ updatedEmail: event.target.value });\n  };\n\n  // Storing User Entered Role Into State\n  onChangeEntryRole = (event) => {\n    this.setState({ updatedRole: event.target.value });\n  };\n\n  // Delete Specific Entry By Clicking  The Delete Icon\n  onClickDeleteButton = () => {\n    const { eachEntry, deleteEntry } = this.props;\n    const result = window.confirm(\n      `Do You Want To Delete Entry With Name: ${eachEntry.name}`\n    );\n    if (result) {\n      deleteEntry(eachEntry.id);\n    }\n  };\n\n  // Select Or Unselect The Entry By Check Input By User\n  onChangeCheckBox = (event) => {\n    const { eachEntry, selectEntry, unselectEntry } = this.props;\n    if (event.target.checked) {\n      selectEntry(eachEntry);\n    } else {\n      unselectEntry(eachEntry.id);\n    }\n  };\n\n  // Render List Item With The Entry Details\n  renderEntryItemEditForm = () => {\n    const { eachEntry, selectedEntries } = this.props;\n    const { updatedName, updatedEmail, updatedRole } = this.state;\n    const isEntrySelected =\n      selectedEntries.find((eachItem) => eachItem.id === eachEntry.id) !==\n      undefined;\n    const entryBackgroundColor = isEntrySelected\n      ? \"selected-entry-background-color\"\n      : \"unselected-entry-background-color\";\n    return (\n      <li className=\"entry-list-item\">\n        <form\n          onSubmit={this.onSubmitEditEntryForm}\n          className={`entry-edit-form ${entryBackgroundColor}`}\n        >\n          <input\n            type=\"checkbox\"\n            className=\"list-item-form-checkbox-input\"\n            checked={isEntrySelected}\n            onChange={this.onChangeCheckBox}\n          />\n          <input\n            required\n            autoFocus\n            type=\"text\"\n            id=\"entryName\"\n            className=\"entry-edit-form-input-name\"\n            placeholder={eachEntry.name}\n            value={updatedName}\n            onChange={this.onChangeEntryName}\n          />\n          <input\n            required\n            type=\"email\"\n            id=\"entryEmail\"\n            className=\"entry-edit-form-input-email\"\n            placeholder={eachEntry.email}\n            value={updatedEmail}\n            onChange={this.onChangeEntryEmail}\n          />\n          <input\n            required\n            type=\"text\"\n            id=\"entryRole\"\n            className=\"entry-edit-form-input-role\"\n            placeholder={eachEntry.role}\n            value={updatedRole}\n            onChange={this.onChangeEntryRole}\n          />\n          <div className=\"list-item-form-icons\">\n            <button className=\"entry-edit-button\" type=\"submit\">\n              <FiUpload size=\"22px\" color=\"#064635\" />\n            </button>\n            <button\n              className=\"entry-delete-button\"\n              type=\"button\"\n              onClick={this.onClickDeleteButton}\n            >\n              <MdDeleteOutline size=\"22px\" color=\"red\" />\n            </button>\n          </div>\n        </form>\n        <hr className=\"entry-item-bottom-line\" />\n      </li>\n    );\n  };\n\n  // Render Form To Update Any Entry\n  renderEntryListItem = () => {\n    const { eachEntry, selectedEntries } = this.props;\n    const isEntrySelected =\n      selectedEntries.find((eachItem) => eachItem.id === eachEntry.id) !==\n      undefined;\n    const entryBackgroundColor = isEntrySelected\n      ? \"selected-entry-background-color\"\n      : \"unselected-entry-background-color\";\n    return (\n      <li className={`entries-list-item ${entryBackgroundColor}`}>\n        <div className=\"list-item-container \">\n          <input\n            type=\"checkbox\"\n            className=\"list-item-checkbox-input\"\n            checked={isEntrySelected}\n            onChange={this.onChangeCheckBox}\n          />\n          <p className=\"list-item-text-name\">{eachEntry.name}</p>\n          <p className=\"list-item-text-email\">{eachEntry.email}</p>\n          <p className=\"list-item-text-role\">{eachEntry.role}</p>\n          <div className=\"list-item-icons\">\n            <button\n              className=\"entry-edit-button\"\n              type=\"button\"\n              onClick={this.onClickEditEntryButton}\n            >\n              <AiOutlineForm size=\"18px\" />\n            </button>\n            <button\n              className=\"entry-delete-button\"\n              type=\"button\"\n              onClick={this.onClickDeleteButton}\n            >\n              <MdDeleteOutline size=\"22px\" color=\"red\" />\n            </button>\n          </div>\n        </div>\n        <hr className=\"entry-item-bottom-line\" />\n      </li>\n    );\n  };\n\n  // Render Each Entry Or Each Entry Form\n  render() {\n    const { editEntryDetails } = this.state;\n    if (editEntryDetails) {\n      return this.renderEntryItemEditForm();\n    }\n    return this.renderEntryListItem();\n  }\n}\n\nexport default EntriesListItem;\n","import { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nimport { CgDanger } from \"react-icons/cg\";\nimport { BsArrowLeftCircle, BsArrowRightCircle } from \"react-icons/bs\";\n\nimport EntriesListItem from \"../entriesListItem\";\n\nimport \"./index.css\";\n\nconst apiConstants = {\n  initial: \"INITIAL\",\n  success: \"SUCCESS\",\n  failure: \"FAILURE\",\n  inProgress: \"IN_PROGRESS\",\n};\n\nclass Home extends Component {\n  state = {\n    apiStatus: apiConstants.initial,\n    entriesData: [],\n    searchedDisplayEntries: [],\n    selectedEntries: [],\n    searchInput: \"\",\n    itemsRange: 10,\n    startItemNumber: 0,\n    endItemNumber: 10,\n    currentPageNumber: 1,\n    headInputCheckedStatus: false,\n  };\n\n  componentDidMount() {\n    this.getEntriesDataFromApi();\n  }\n\n  // Fetching Data\n  getEntriesDataFromApi = async () => {\n    this.setState({ apiStatus: apiConstants.inProgress });\n    const dataUrl =\n      \"https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json\";\n    const options = {\n      method: \"GET\",\n    };\n    const dataResponse = await fetch(dataUrl, options);\n    if (dataResponse.ok) {\n      const formattedData = await dataResponse.json();\n      this.setState({\n        entriesData: formattedData,\n        apiStatus: apiConstants.success,\n      });\n    } else {\n      this.setState({ apiStatus: apiConstants.failure });\n    }\n  };\n\n  // Pagination Previous Page Button\n  displayPreviousPage = () => {\n    const { currentPageNumber, itemsRange } = this.state;\n    if (currentPageNumber > 1) {\n      this.setState((prevState) => ({\n        startItemNumber: prevState.startItemNumber - itemsRange,\n        endItemNumber: prevState.endItemNumber - itemsRange,\n        currentPageNumber: prevState.currentPageNumber - 1,\n        headInputCheckedStatus: false,\n      }));\n    }\n  };\n\n  // Pagination Next Page Button\n  displayNextPage = () => {\n    const {\n      entriesData,\n      searchedDisplayEntries,\n      searchInput,\n      itemsRange,\n      currentPageNumber,\n    } = this.state;\n    const isUserSearching = searchInput.length !== 0;\n    const entriesListToBePaginated = isUserSearching\n      ? searchedDisplayEntries\n      : entriesData;\n    const entriesDataLength = entriesListToBePaginated.length;\n    const totalPagesNumber = Math.ceil(entriesDataLength / itemsRange);\n    let totalPagesNumberToBeDisplayed = 1;\n    if (totalPagesNumber !== 0) {\n      totalPagesNumberToBeDisplayed = totalPagesNumber;\n    }\n    if (currentPageNumber < totalPagesNumberToBeDisplayed) {\n      this.setState((prevState) => ({\n        startItemNumber: prevState.startItemNumber + itemsRange,\n        endItemNumber: prevState.endItemNumber + itemsRange,\n        currentPageNumber: prevState.currentPageNumber + 1,\n        headInputCheckedStatus: false,\n      }));\n    }\n  };\n\n  // Search Input\n  onChangeSearchInput = (event) => {\n    const { entriesData } = this.state;\n    const searchedEntriesData = [];\n    entriesData.map((eachItem) => {\n      if (\n        eachItem.name\n          .toLowerCase()\n          .includes(event.target.value.toLowerCase()) ||\n        eachItem.email\n          .toLowerCase()\n          .includes(event.target.value.toLowerCase()) ||\n        eachItem.role.toLowerCase().includes(event.target.value.toLowerCase())\n      ) {\n        searchedEntriesData.push(eachItem);\n      }\n      return null;\n    });\n    this.setState({\n      searchInput: event.target.value,\n      searchedDisplayEntries: searchedEntriesData,\n    });\n  };\n\n  // Delete Single Entry From The Data On Click Delete Button\n  deleteEntry = (id) => {\n    const { entriesData, searchedDisplayEntries } = this.state;\n    const filteredEntriesData = entriesData.filter(\n      (eachItem) => eachItem.id !== id\n    );\n    const filteredSearchedDisplayEntries = searchedDisplayEntries.filter(\n      (eachItem) => eachItem.id !== id\n    );\n    this.setState({\n      entriesData: filteredEntriesData,\n      searchedDisplayEntries: filteredSearchedDisplayEntries,\n    });\n  };\n\n  // Selecting Items\n  selectEntry = (selectedEntry) => {\n    this.setState((prevState) => ({\n      selectedEntries: [...prevState.selectedEntries, selectedEntry],\n    }));\n  };\n\n  // Unselect The Item\n  unselectEntry = (id) => {\n    const { selectedEntries } = this.state;\n    const updatedSelectedEntries = selectedEntries.filter(\n      (eachItem) => eachItem.id !== id\n    );\n    this.setState({ selectedEntries: updatedSelectedEntries });\n  };\n\n  // Delete Selected Items On Click Delete Items Button\n  deleteSelectedItems = () => {\n    const { entriesData, searchedDisplayEntries, selectedEntries } = this.state;\n    if (selectedEntries.length === 0) {\n      alert(\n        \"You Have Not Selected Any Entry...Please Select Entry/Entries Before You Delete Them...\"\n      );\n    } else {\n      const selectedEntriesLength = selectedEntries.length;\n      const EntriesTextItem = selectedEntriesLength > 1 ? \"Entries\" : \"Entry\";\n      alert(\n        `Selected ${selectedEntries.length} ${EntriesTextItem} Will Be Deleted From The Entries List...`\n      );\n    }\n    const pseudoEntriesData = entriesData;\n    selectedEntries.map((eachItem) => {\n      const index = pseudoEntriesData.indexOf(eachItem);\n      pseudoEntriesData.splice(index, 1);\n      return null;\n    });\n    const pseudoSearchDisplayEntries = searchedDisplayEntries;\n    selectedEntries.map((eachItem) => {\n      const index = pseudoSearchDisplayEntries.indexOf(eachItem);\n      pseudoSearchDisplayEntries.splice(index, 1);\n      return null;\n    });\n    this.setState({\n      entriesData: pseudoEntriesData,\n      searchedDisplayEntries: pseudoSearchDisplayEntries,\n      selectedEntries: [],\n      headInputCheckedStatus: false,\n    });\n  };\n\n  // Select Group Of Entries From Head Input\n  onCheckHeadInput = (event) => {\n    const {\n      searchInput,\n      entriesData,\n      searchedDisplayEntries,\n      selectedEntries,\n      startItemNumber,\n      endItemNumber,\n    } = this.state;\n    const isHeadInputChecked = event.target.checked;\n    const isUserSearching = searchInput.length !== 0;\n    const entiresToBeDisplayed = isUserSearching\n      ? searchedDisplayEntries\n      : entriesData;\n    const thisPageList = entiresToBeDisplayed.slice(\n      startItemNumber,\n      endItemNumber\n    );\n    if (isHeadInputChecked) {\n      this.setState((prevState) => ({\n        selectedEntries: [...prevState.selectedEntries, ...thisPageList],\n        headInputCheckedStatus: true,\n      }));\n    } else {\n      const pseudoSelectedEntriesList = selectedEntries;\n      let updatedPseudoSelectedEntriesList = [];\n      pseudoSelectedEntriesList.map((eachItem) => {\n        const index = pseudoSelectedEntriesList.indexOf(eachItem);\n        updatedPseudoSelectedEntriesList = pseudoSelectedEntriesList.slice(\n          index,\n          1\n        );\n        return null;\n      });\n      this.setState({\n        selectedEntries: updatedPseudoSelectedEntriesList,\n        headInputCheckedStatus: false,\n      });\n    }\n  };\n\n  // Update The Entry Data Using The Edit Button\n  onUpdateEntryDetails = (existingEntry, updatedEntry) => {\n    const { entriesData, searchedDisplayEntries } = this.state;\n    const trialEntriesData = entriesData;\n    const entryIndex = trialEntriesData.indexOf(existingEntry);\n    trialEntriesData.splice(entryIndex, 1, updatedEntry);\n    const trialSearchedDisplayEntriesData = searchedDisplayEntries;\n    const searchedIndex = trialSearchedDisplayEntriesData.indexOf(\n      existingEntry\n    );\n    trialSearchedDisplayEntriesData.splice(searchedIndex, 1, updatedEntry);\n\n    this.setState({\n      entriesData: trialEntriesData,\n      searchedDisplayEntries: trialSearchedDisplayEntriesData,\n    });\n  };\n\n  // Render Loader While Entries Data Is Being Fetched\n  renderLoader = () => (\n    <div className=\"loader-container\">\n      <Loader type=\"TailSpin\" color=\"#000000\" height={80} width={80} />\n    </div>\n  );\n\n  // Pagination Buttons And Content Container At The Bottom Of Each Page\n  renderPaginationContainer = () => {\n    const {\n      entriesData,\n      searchedDisplayEntries,\n      searchInput,\n      itemsRange,\n      currentPageNumber,\n    } = this.state;\n    const isUserSearching = searchInput.length !== 0;\n    const entriesListToBePaginated = isUserSearching\n      ? searchedDisplayEntries\n      : entriesData;\n    const entriesDataLength = entriesListToBePaginated.length;\n    const totalPagesNumber = Math.ceil(entriesDataLength / itemsRange);\n    let totalPagesNumberToBeDisplayed = 1;\n    if (totalPagesNumber !== 0) {\n      totalPagesNumberToBeDisplayed = totalPagesNumber;\n    }\n    return (\n      <div className=\"home-pagination-buttons-container\">\n        <button\n          className=\"pagination-button\"\n          type=\"button\"\n          onClick={this.displayPreviousPage}\n        >\n          <BsArrowLeftCircle size=\"30px\" />\n        </button>\n        <p className=\"current-page-number\">{`Page ${currentPageNumber} Of ${totalPagesNumberToBeDisplayed} Pages`}</p>\n        <button\n          className=\"pagination-button\"\n          type=\"button\"\n          onClick={this.displayNextPage}\n        >\n          <BsArrowRightCircle size=\"30px\" />\n        </button>\n      </div>\n    );\n  };\n\n  // Render Fetched Entries List\n  renderEntriesList = () => {\n    const {\n      entriesData,\n      searchedDisplayEntries,\n      searchInput,\n      selectedEntries,\n      startItemNumber,\n      endItemNumber,\n      headInputCheckedStatus,\n    } = this.state;\n    const isUserSearching = searchInput.length !== 0;\n    const entriesToBeDisplayed = isUserSearching\n      ? searchedDisplayEntries\n      : entriesData;\n    const isSearchInputValid = entriesToBeDisplayed.length !== 0;\n    const areEntriesMoreThanTen = entriesToBeDisplayed.length > 10;\n    const thisPageList = areEntriesMoreThanTen\n      ? entriesToBeDisplayed.slice(startItemNumber, endItemNumber)\n      : entriesToBeDisplayed;\n    return (\n      <div className=\"entries-list-container\">\n        <div className=\"entries-list-headings-container\">\n          <input\n            type=\"checkbox\"\n            className=\"list-checkbox-input\"\n            checked={headInputCheckedStatus}\n            onChange={this.onCheckHeadInput}\n          />\n          <p className=\"list-heading-text-name\">Name</p>\n          <p className=\"list-heading-text-email\">Email</p>\n          <p className=\"list-heading-text-role\">Role</p>\n          <p className=\"list-heading-text-actions\">Actions</p>\n        </div>\n        <hr className=\"entry-head-bottom-line\" />\n        <ul className=\"home-entries-list\">\n          {isSearchInputValid ? (\n            thisPageList.map((eachItem) => (\n              <EntriesListItem\n                key={eachItem.id}\n                eachEntry={eachItem}\n                deleteEntry={this.deleteEntry}\n                selectEntry={this.selectEntry}\n                unselectEntry={this.unselectEntry}\n                selectedEntries={selectedEntries}\n                headInputCheckedStatus={headInputCheckedStatus}\n                onUpdateEntryDetails={this.onUpdateEntryDetails}\n              />\n            ))\n          ) : (\n            <h1 className=\"empty-entries-message-heading\">\n              No Entry Is Available...\n            </h1>\n          )}\n        </ul>\n        <div className=\"entries-delete-button-pagination-container\">\n          <button\n            className=\"delete-selected-items-button\"\n            type=\"button\"\n            onClick={this.deleteSelectedItems}\n          >\n            Delete Selected\n          </button>\n          {this.renderPaginationContainer()}\n        </div>\n      </div>\n    );\n  };\n\n  // Render Failure Container In Case Of Data Fetch Failure\n  renderFailureView = () => (\n    <div className=\"api-failure-view-container\">\n      <CgDanger size=\"60px\" />\n      <h1 className=\"api-failure-heading\">Network Error</h1>\n      <p className=\"api-failure-text\">Sorry For The Inconvenience...</p>\n    </div>\n  );\n\n  // Render Entries List Container\n  renderEntriesListContainer = () => {\n    const { apiStatus } = this.state;\n    switch (apiStatus) {\n      case apiConstants.failure:\n        return this.renderFailureView();\n      case apiConstants.inProgress:\n        return this.renderLoader();\n      case apiConstants.success:\n        return this.renderEntriesList();\n      default:\n        return null;\n    }\n  };\n\n  // Render Entries List Page\n  render() {\n    return (\n      <div className=\"home-bg-container\">\n        <h1 className=\"home-app-heading\">Geektrust Admin UI Challenge</h1>\n        <div className=\"home-content-container\">\n          <input\n            className=\"home-search-input\"\n            placeholder=\"Search by name email or role\"\n            type=\"text\"\n            onChange={this.onChangeSearchInput}\n          />\n          {this.renderEntriesListContainer()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import Home from \"./components/home\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}