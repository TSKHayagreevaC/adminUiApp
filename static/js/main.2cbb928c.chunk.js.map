{"version":3,"sources":["components/entriesListItem/index.js","components/home/index.js","App.js","reportWebVitals.js","index.js"],"names":["EntriesListItem","state","id","updatedName","updatedEmail","updatedRole","renderPopup","className","position","trigger","type","size","close","onSubmit","onSubmitEditEntryForm","htmlFor","onChange","onChangeEntryName","onChangeEntryEmail","onChangeEntryRole","onClick","event","preventDefault","props","onUpdateEntryDetails","eachEntry","name","email","role","setState","target","value","onClickDeleteButton","deleteEntry","alert","onChangeCheckBox","selectEntry","unselectEntry","checked","this","isEntrySelected","undefined","selectedEntries","find","eachItem","entryBackgroundColor","color","Component","apiConstants","Home","apiStatus","entriesData","searchedDisplayEntries","searchInput","itemsRange","startItemNumber","endItemNumber","currentPageNumber","headInputCheckedStatus","getEntriesDataFromApi","a","options","method","fetch","dataResponse","ok","json","formattedData","displayPreviousPage","prevState","displayNextPage","entriesDataLength","length","totalPagesNumber","Math","ceil","totalPagesNumberToBeDisplayed","onChangeSearchInput","searchedEntriesData","map","toLowerCase","includes","push","filteredEntriesData","filter","filteredSearchedDisplayEntries","selectedEntry","updatedSelectedEntries","deleteSelectedItems","pseudoEntriesData","index","indexOf","splice","pseudoSearchDisplayEntries","onCheckHeadInput","isHeadInputChecked","thisPageList","slice","pseudoSelectedEntriesList","updatedPseudoSelectedEntriesList","existingEntry","updatedEntry","trialEntriesData","entryIndex","trialSearchedDisplayEntriesData","searchedIndex","renderLoader","height","width","renderPaginationContainer","renderEntriesList","entriesToBeDisplayed","isSearchInputValid","renderFailureView","renderEntriesListContainer","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cbb928c.chunk.js","sourcesContent":["import { Component, React } from \"react\";\nimport Popup from \"reactjs-popup\";\n\nimport { MdDeleteOutline } from \"react-icons/md\";\nimport { AiOutlineForm } from \"react-icons/ai\";\n\nimport \"./index.css\";\n\nclass EntriesListItem extends Component {\n  state = {\n    id: \"\",\n    updatedName: \"\",\n    updatedEmail: \"\",\n    updatedRole: \"\",\n  };\n\n  // Render Form To Update Any Entry - As A popup\n  renderPopup = () => (\n    <Popup\n      className=\"popup-content\"\n      position=\"left center\"\n      trigger={\n        <button className=\"entry-edit-button\" type=\"button\">\n          <AiOutlineForm size=\"18px\" />\n        </button>\n      }\n    >\n      {(close) => (\n        <form\n          onSubmit={this.onSubmitEditEntryForm}\n          className=\"entry-edit-form-container\"\n        >\n          <h1 className=\"update-entry-form-heading\">Enter Details Here</h1>\n          <label htmlFor=\"entryName\" className=\"entry-edit-form-label\">\n            NAME\n          </label>\n          <input\n            type=\"text\"\n            id=\"entryName\"\n            className=\"entry-edit-form-input\"\n            onChange={this.onChangeEntryName}\n          />\n          <label htmlFor=\"entryEmail\" className=\"entry-edit-form-label\">\n            EMAIL\n          </label>\n          <input\n            type=\"email\"\n            id=\"entryEmail\"\n            className=\"entry-edit-form-input\"\n            onChange={this.onChangeEntryEmail}\n          />\n          <label htmlFor=\"entryRole\" className=\"entry-edit-form-label\">\n            ROLE\n          </label>\n          <input\n            type=\"text\"\n            id=\"entryRole\"\n            className=\"entry-edit-form-input\"\n            onChange={this.onChangeEntryRole}\n          />\n          <div className=\"popup-buttons-container\">\n            <button type=\"submit\" className=\"update-entry-button\">\n              Update Entry\n            </button>\n            <button\n              type=\"button\"\n              className=\"popup-cancel-button\"\n              onClick={close}\n            >\n              Close\n            </button>\n          </div>\n        </form>\n      )}\n    </Popup>\n  );\n\n  // Edit The Entry By User - Storing Input Values Into State\n  onSubmitEditEntryForm = (event) => {\n    event.preventDefault();\n    const { onUpdateEntryDetails, eachEntry } = this.props;\n    const { updatedName, updatedEmail, updatedRole } = this.state;\n    const updatedEntryDetails = {\n      id: eachEntry.id,\n      name: updatedName,\n      email: updatedEmail,\n      role: updatedRole,\n    };\n    onUpdateEntryDetails(eachEntry, updatedEntryDetails);\n  };\n\n  // Storing User Entered Name Into State\n  onChangeEntryName = (event) => {\n    this.setState({ updatedName: event.target.value });\n  };\n\n  // Storing User Entered Email Into State\n  onChangeEntryEmail = (event) => {\n    this.setState({ updatedEmail: event.target.value });\n  };\n\n  // Storing User Entered Role Into State\n  onChangeEntryRole = (event) => {\n    this.setState({ updatedRole: event.target.value });\n  };\n\n  // Delete Specific Entry By Clicking  The Delete Icon\n  onClickDeleteButton = () => {\n    const { eachEntry, deleteEntry } = this.props;\n    alert(`Do You Want To Delete Entry With Name: ${eachEntry.name}`);\n    deleteEntry(eachEntry.id);\n  };\n\n  // Select Or Unselect The Entry By Check Input By User\n  onChangeCheckBox = (event) => {\n    const { eachEntry, selectEntry, unselectEntry } = this.props;\n    if (event.target.checked) {\n      selectEntry(eachEntry);\n    } else {\n      unselectEntry(eachEntry.id);\n    }\n  };\n\n  // Render Each Entry\n  render() {\n    const { eachEntry, selectedEntries } = this.props;\n    const isEntrySelected =\n      selectedEntries.find((eachItem) => eachItem.id === eachEntry.id) !==\n      undefined;\n    const entryBackgroundColor = isEntrySelected\n      ? \"selected-entry-background-color\"\n      : \"unselected-entry-background-color\";\n    return (\n      <li className={`entries-list-item ${entryBackgroundColor}`}>\n        <div className=\"list-item-container \">\n          <input\n            type=\"checkbox\"\n            className=\"list-item-checkbox-input\"\n            checked={isEntrySelected}\n            onChange={this.onChangeCheckBox}\n          />\n          <p className=\"list-item-text\">{eachEntry.name}</p>\n          <p className=\"list-item-text\">{eachEntry.email}</p>\n          <p className=\"list-item-text\">{eachEntry.role}</p>\n          <div className=\"list-item-icons\">\n            {this.renderPopup()}\n            <button\n              className=\"entry-delete-button\"\n              type=\"button\"\n              onClick={this.onClickDeleteButton}\n            >\n              <MdDeleteOutline size=\"22px\" color=\"red\" />\n            </button>\n          </div>\n        </div>\n        <hr className=\"entry-item-bottom-line\" />\n      </li>\n    );\n  }\n}\n\nexport default EntriesListItem;\n","import { Component } from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nimport { CgDanger } from \"react-icons/cg\";\nimport { BsArrowLeftCircle, BsArrowRightCircle } from \"react-icons/bs\";\n\nimport EntriesListItem from \"../entriesListItem\";\n\nimport \"./index.css\";\n\nconst apiConstants = {\n  initial: \"INITIAL\",\n  success: \"SUCCESS\",\n  failure: \"FAILURE\",\n  inProgress: \"IN_PROGRESS\",\n};\n\nclass Home extends Component {\n  state = {\n    apiStatus: apiConstants.initial,\n    entriesData: [],\n    searchedDisplayEntries: [],\n    selectedEntries: [],\n    searchInput: \"\",\n    itemsRange: 10,\n    startItemNumber: 0,\n    endItemNumber: 10,\n    currentPageNumber: 1,\n    headInputCheckedStatus: false,\n  };\n\n  componentDidMount() {\n    this.getEntriesDataFromApi();\n  }\n\n  // Fetching Data\n  getEntriesDataFromApi = async () => {\n    this.setState({ apiStatus: apiConstants.inProgress });\n    const dataUrl =\n      \"https://geektrust.s3-ap-southeast-1.amazonaws.com/adminui-problem/members.json\";\n    const options = {\n      method: \"GET\",\n    };\n    const dataResponse = await fetch(dataUrl, options);\n    if (dataResponse.ok) {\n      const formattedData = await dataResponse.json();\n      this.setState({\n        entriesData: formattedData,\n        apiStatus: apiConstants.success,\n      });\n    } else {\n      this.setState({ apiStatus: apiConstants.failure });\n    }\n  };\n\n  // Pagination Previous Page Button\n  displayPreviousPage = () => {\n    const { currentPageNumber, itemsRange } = this.state;\n    if (currentPageNumber > 1) {\n      this.setState((prevState) => ({\n        startItemNumber: prevState.startItemNumber - itemsRange,\n        endItemNumber: prevState.endItemNumber - itemsRange,\n        currentPageNumber: prevState.currentPageNumber - 1,\n        headInputCheckedStatus: false,\n      }));\n    }\n  };\n\n  // Pagination Next Page Button\n  displayNextPage = () => {\n    const {\n      entriesData,\n      searchedDisplayEntries,\n      searchInput,\n      itemsRange,\n      currentPageNumber,\n    } = this.state;\n    const isUserSearching = searchInput.length !== 0;\n    const entriesListToBePaginated = isUserSearching\n      ? searchedDisplayEntries\n      : entriesData;\n    const entriesDataLength = entriesListToBePaginated.length;\n    const totalPagesNumber = Math.ceil(entriesDataLength / itemsRange);\n    let totalPagesNumberToBeDisplayed = 1;\n    if (totalPagesNumber !== 0) {\n      totalPagesNumberToBeDisplayed = totalPagesNumber;\n    }\n    if (currentPageNumber < totalPagesNumberToBeDisplayed) {\n      this.setState((prevState) => ({\n        startItemNumber: prevState.startItemNumber + itemsRange,\n        endItemNumber: prevState.endItemNumber + itemsRange,\n        currentPageNumber: prevState.currentPageNumber + 1,\n        headInputCheckedStatus: false,\n      }));\n    }\n  };\n\n  // Search Input\n  onChangeSearchInput = (event) => {\n    const { entriesData } = this.state;\n    const searchedEntriesData = [];\n    entriesData.map((eachItem) => {\n      if (\n        eachItem.name\n          .toLowerCase()\n          .includes(event.target.value.toLowerCase()) ||\n        eachItem.email\n          .toLowerCase()\n          .includes(event.target.value.toLowerCase()) ||\n        eachItem.role.toLowerCase().includes(event.target.value.toLowerCase())\n      ) {\n        searchedEntriesData.push(eachItem);\n      }\n      return null;\n    });\n    this.setState({\n      searchInput: event.target.value,\n      searchedDisplayEntries: searchedEntriesData,\n    });\n  };\n\n  // Delete Single Entry From The Data On Click Delete Button\n  deleteEntry = (id) => {\n    const { entriesData, searchedDisplayEntries } = this.state;\n    const filteredEntriesData = entriesData.filter(\n      (eachItem) => eachItem.id !== id\n    );\n    const filteredSearchedDisplayEntries = searchedDisplayEntries.filter(\n      (eachItem) => eachItem.id !== id\n    );\n    this.setState({\n      entriesData: filteredEntriesData,\n      searchedDisplayEntries: filteredSearchedDisplayEntries,\n    });\n  };\n\n  // Selecting Items\n  selectEntry = (selectedEntry) => {\n    this.setState((prevState) => ({\n      selectedEntries: [...prevState.selectedEntries, selectedEntry],\n    }));\n  };\n\n  // Unselect The Item\n  unselectEntry = (id) => {\n    const { selectedEntries } = this.state;\n    const updatedSelectedEntries = selectedEntries.filter(\n      (eachItem) => eachItem.id !== id\n    );\n    this.setState({ selectedEntries: updatedSelectedEntries });\n  };\n\n  // Delete Selected Items On Click Delete Items Button\n  deleteSelectedItems = () => {\n    alert(\"Selected Entries Will Be Deleted From The Entries List...\");\n    const { entriesData, searchedDisplayEntries, selectedEntries } = this.state;\n    const pseudoEntriesData = entriesData;\n    selectedEntries.map((eachItem) => {\n      const index = pseudoEntriesData.indexOf(eachItem);\n      pseudoEntriesData.splice(index, 1);\n      return null;\n    });\n    const pseudoSearchDisplayEntries = searchedDisplayEntries;\n    selectedEntries.map((eachItem) => {\n      const index = pseudoSearchDisplayEntries.indexOf(eachItem);\n      pseudoSearchDisplayEntries.splice(index, 1);\n      return null;\n    });\n    this.setState({\n      entriesData: pseudoEntriesData,\n      searchedDisplayEntries: pseudoSearchDisplayEntries,\n      selectedEntries: [],\n      headInputCheckedStatus: false,\n    });\n  };\n\n  // Select Group Of Entries From Head Input\n  onCheckHeadInput = (event) => {\n    const {\n      searchInput,\n      entriesData,\n      searchedDisplayEntries,\n      selectedEntries,\n      startItemNumber,\n      endItemNumber,\n    } = this.state;\n    const isHeadInputChecked = event.target.checked;\n    const isUserSearching = searchInput.length !== 0;\n    const entiresToBeDisplayed = isUserSearching\n      ? searchedDisplayEntries\n      : entriesData;\n    const thisPageList = entiresToBeDisplayed.slice(\n      startItemNumber,\n      endItemNumber\n    );\n    if (isHeadInputChecked) {\n      this.setState((prevState) => ({\n        selectedEntries: [...prevState.selectedEntries, ...thisPageList],\n        headInputCheckedStatus: true,\n      }));\n    } else {\n      const pseudoSelectedEntriesList = selectedEntries;\n      let updatedPseudoSelectedEntriesList = [];\n      pseudoSelectedEntriesList.map((eachItem) => {\n        const index = pseudoSelectedEntriesList.indexOf(eachItem);\n        updatedPseudoSelectedEntriesList = pseudoSelectedEntriesList.slice(\n          index,\n          1\n        );\n        return null;\n      });\n      this.setState({\n        selectedEntries: updatedPseudoSelectedEntriesList,\n        headInputCheckedStatus: false,\n      });\n    }\n  };\n\n  // Update The Entry Data Using The Edit Button\n  onUpdateEntryDetails = (existingEntry, updatedEntry) => {\n    const { entriesData, searchedDisplayEntries } = this.state;\n    const trialEntriesData = entriesData;\n    const entryIndex = trialEntriesData.indexOf(existingEntry);\n    trialEntriesData.splice(entryIndex, 1, updatedEntry);\n    const trialSearchedDisplayEntriesData = searchedDisplayEntries;\n    const searchedIndex = trialSearchedDisplayEntriesData.indexOf(\n      existingEntry\n    );\n    trialSearchedDisplayEntriesData.splice(searchedIndex, 1, updatedEntry);\n\n    this.setState({\n      entriesData: trialEntriesData,\n      searchedDisplayEntries: trialSearchedDisplayEntriesData,\n    });\n  };\n\n  // Render Loader While Entries Data Is Being Fetched\n  renderLoader = () => (\n    <div className=\"loader-container\">\n      <Loader type=\"TailSpin\" color=\"#000000\" height={80} width={80} />\n    </div>\n  );\n\n  // Pagination Buttons And Content Container At The Bottom Of Each Page\n  renderPaginationContainer = () => {\n    const {\n      entriesData,\n      searchedDisplayEntries,\n      searchInput,\n      itemsRange,\n      currentPageNumber,\n    } = this.state;\n    const isUserSearching = searchInput.length !== 0;\n    const entriesListToBePaginated = isUserSearching\n      ? searchedDisplayEntries\n      : entriesData;\n    const entriesDataLength = entriesListToBePaginated.length;\n    const totalPagesNumber = Math.ceil(entriesDataLength / itemsRange);\n    let totalPagesNumberToBeDisplayed = 1;\n    if (totalPagesNumber !== 0) {\n      totalPagesNumberToBeDisplayed = totalPagesNumber;\n    }\n    return (\n      <div className=\"home-pagination-buttons-container\">\n        <button\n          className=\"pagination-button\"\n          type=\"button\"\n          onClick={this.displayPreviousPage}\n        >\n          <BsArrowLeftCircle size=\"30px\" />\n        </button>\n        <p className=\"current-page-number\">{`Page ${currentPageNumber} Of ${totalPagesNumberToBeDisplayed} Pages`}</p>\n        <button\n          className=\"pagination-button\"\n          type=\"button\"\n          onClick={this.displayNextPage}\n        >\n          <BsArrowRightCircle size=\"30px\" />\n        </button>\n      </div>\n    );\n  };\n\n  // Render Fetched Entries List\n  renderEntriesList = () => {\n    const {\n      entriesData,\n      searchedDisplayEntries,\n      searchInput,\n      selectedEntries,\n      startItemNumber,\n      endItemNumber,\n      headInputCheckedStatus,\n    } = this.state;\n    const isUserSearching = searchInput.length !== 0;\n    const entriesToBeDisplayed = isUserSearching\n      ? searchedDisplayEntries\n      : entriesData;\n    const isSearchInputValid = entriesToBeDisplayed.length !== 0;\n    const areEntriesMoreThanTen = entriesToBeDisplayed.length > 10;\n    const thisPageList = areEntriesMoreThanTen\n      ? entriesToBeDisplayed.slice(startItemNumber, endItemNumber)\n      : entriesToBeDisplayed;\n    return (\n      <div className=\"entries-list-container\">\n        <div className=\"entries-list-headings-container\">\n          <input\n            type=\"checkbox\"\n            className=\"list-checkbox-input\"\n            checked={headInputCheckedStatus}\n            onChange={this.onCheckHeadInput}\n          />\n          <p className=\"list-heading-text\">Name</p>\n          <p className=\"list-heading-text\">Email</p>\n          <p className=\"list-heading-text\">Role</p>\n          <p className=\"list-heading-text\">Actions</p>\n        </div>\n        <hr className=\"entry-head-bottom-line\" />\n        <ul className=\"home-entries-list\">\n          {isSearchInputValid ? (\n            thisPageList.map((eachItem) => (\n              <EntriesListItem\n                key={eachItem.id}\n                eachEntry={eachItem}\n                deleteEntry={this.deleteEntry}\n                selectEntry={this.selectEntry}\n                unselectEntry={this.unselectEntry}\n                selectedEntries={selectedEntries}\n                headInputCheckedStatus={headInputCheckedStatus}\n                onUpdateEntryDetails={this.onUpdateEntryDetails}\n              />\n            ))\n          ) : (\n            <h1 className=\"empty-entries-message-heading\">\n              No Entry Is Left...\n            </h1>\n          )}\n        </ul>\n        <div className=\"entries-delete-button-pagination-container\">\n          <button\n            className=\"delete-selected-items-button\"\n            type=\"button\"\n            onClick={this.deleteSelectedItems}\n          >\n            Delete Selected\n          </button>\n          {this.renderPaginationContainer()}\n        </div>\n      </div>\n    );\n  };\n\n  // Render Failure Container In Case Of Data Fetch Failure\n  renderFailureView = () => (\n    <div className=\"api-failure-view-container\">\n      <CgDanger size=\"60px\" />\n      <h1 className=\"api-failure-heading\">Network Error</h1>\n      <p className=\"api-failure-text\">Sorry For The Inconvenience...</p>\n    </div>\n  );\n\n  // Render Entries List Container\n  renderEntriesListContainer = () => {\n    const { apiStatus } = this.state;\n    switch (apiStatus) {\n      case apiConstants.failure:\n        return this.renderFailureView();\n      case apiConstants.inProgress:\n        return this.renderLoader();\n      case apiConstants.success:\n        return this.renderEntriesList();\n      default:\n        return null;\n    }\n  };\n\n  // Render Entries List Page\n  render() {\n    return (\n      <div className=\"home-bg-container\">\n        <h1 className=\"home-app-heading\">Geektrust Admin UI Challenge</h1>\n        <div className=\"home-content-container\">\n          <input\n            className=\"home-search-input\"\n            placeholder=\"Search by name email or role\"\n            type=\"text\"\n            onChange={this.onChangeSearchInput}\n          />\n          {this.renderEntriesListContainer()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import Home from \"./components/home\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}